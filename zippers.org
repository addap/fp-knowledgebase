* Description
Zippers are an alternative representation of a data structure where you have a focus element. You can always transform it back. They might always have to be comonads (but then there wouldn't be an equivalent to the empty list?)
* Resources
** DONE [[https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/huet-zipper.pdf][Functional Pearl]]
The paper by Gerard Huet explains an efficient functional datastructure for traversing and changing trees. This datastructure is compared to "a tree turned inside out like a glove". It consists of a normal tree, which is not the whole tree but the subtree which is the current focus of attention, and in addition a zipper-like datastructure called a path which describes the layout of the whole tree in relation to the focused subtree.
#+begin_src ocaml
type tree = Leaf of item | Branch of tree list
type path = Top | Node of tree list * path * tree list
type location = Loc of tree * path
#+end_src
The path contains the siblings to the left and right of the focused subtree and another path that describes the the same thhing one level up.
Given a location it's easy to change the focused subtree by just replacing the first component of the pair. For traversal we can write mostly efficient function to go left/right/up/down.
#+begin_src ocaml
let go_left (Loc (t, p)) = match p with
  | Top -> failwith "left of top"
  | Node (l::left, up, right) -> Loc (l, Node (left, up, t::right))
  | Node ([], _, _) -> failwith "left of first"
let go_up (Loc (t, p)) = match p with
  | Top -> failwith "up of top"
  | Node (left, up, right) -> Loc (Branch (rev left @ t :: right), up)
let go_down (Loc (t, p)) = match t with
  | Item _ -> failwith "down of item"
  | Branch (t1::trees) -> Loc (t1, Node ([], p, trees))
  | _ -> failwith "down of empty"
#+end_src
Note: in dependent types most of these error cases can probably be eliminated.
The are some warts in go_up and go_down since go_up followed by go_down does not land you in the same spot, and go_up is not O(1) because it needs to reverse a list.
*** Scars
A variant of the above trees are when we don't represent a Branch simply as a list of subtrees but turn that list into a zipper aswell. The author calls this a Scar and in that case when going up we don't need to reverse the list in order to give to the branch constructor, we can just use the sibling lists directly. So branch also has a focused subtree ad go_down can directly go to this one.
#+begin_src ocaml
type tree = Item of item | Branch of memo_tree list * memo_tree * memo_tree list
let go_up (Loc (t, p)) = match p with
  | Top -> failwith "up of top"
  | Node (left, up, right) -> Loc (Branch (left, t, right), up)
let go_down (Loc (t, p)) = match t with
  | Item _ -> failwith "down of item"
  | Branch (left, t1, right) -> Loc (t1, Node (left, p, right))
#+end_src
And because the zipper is a nonempty list we eliminated one failure case we had before when there was a Branch with no children (debatable of one wants that).
*** Variations
The paper then also discusses how one could use this approach when dealing with trees with known branch factor. In that case one can write go_up/go_down with an index.
*** Evaluation
The paper presents an interesting datastructure in a well understandable way. That the scars have zipper-lists for branches was my interpretation, I wished the paper had explained that when it presented scars. A believe that implementing these in Coq would be nice since most of the failure cases can be implicitly dealt with.
** TODO [[http://strictlypositive.org/CJ.pdf][More on Zippers from Conal Elliot]]
** TODO [[file:playground/src/zipper.lhs::We're%20going%20to%20take%20a%20look%20at%20an%20alternative%20way%20to%20define%20a%20Zipper%20Comonad][Zipper from Github Gist]]
** TODO [[https://chrispenner.ca/posts/representable-cofree-zippers][Zippers from Representable and Cofree]]
** TODO [[http://okmij.org/ftp/continuations/zipper.html][Okmij on Zippers]]
** TODO [[http://okmij.org/ftp/Scheme/zipper-in-scheme.txt][Okmij on Zippers]] as [[file:continuation.org][delimited continuations]]
** TODO [[https://stackoverflow.com/questions/9190352/abusing-the-algebra-of-algebraic-data-types-why-does-this-work?rq=1][StackOverflow with a lot of extra information and connections to Category Theory]]
